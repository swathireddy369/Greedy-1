// Time Complexity :O(k*n)==>O(n^2)
// Space Complexity :O(n)+O(n)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach:BFS solution

class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        if (n < 2) {
            return true;
        }
        Queue<Integer> qu = new LinkedList<>();//to process elements
        HashSet<Integer> set = new HashSet<>();//visited hashset
        qu.add(0);
        while (!qu.isEmpty()) {
            int idx = qu.poll();
            int value = nums[idx];
            for (int i = 1; i <= value; i++) {
                int newIdx = i + idx;
                if (newIdx == n - 1) {//if reaches last index
                    return true;
                }
                if (!set.contains(newIdx)) {//O(1)
                    qu.add(newIdx);
                    set.add(newIdx);
                }
            }
        }
        return false;
    }
}



// Time Complexity :O(k*n)==>O(n^2)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no

// Your code here along with comments explaining your approach:DFS solution

class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;

        if (n < 2) {
            return true;
        }
        HashSet<Integer> visited = new HashSet<>();
        return helper(nums, 0,visited);
    }

    public boolean helper(int[] nums, int i,HashSet<Integer> visited) {
        //base case
        if (i == nums.length - 1) {
            return true;
        }
        if (visited.contains(i)) {//if already visited
            return false;
        }
        //logic
        int val = nums[i];
        for (int j = 1; j <= val; j++) {
            if (helper(nums, i + j,visited)) {
                return true;
            } 
        }
         visited.add(i);//marking visited
        return false;
    }
}





// Time Complexity :O(n)
// Space Complexity :
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no

// Your code here along with comments explaining your approach:Greedy backward solution

class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int target = n - 1;
        if (n < 2) {
            return true;
        }
        for (int i = n - 2; i >= 0; i--) {
            int val = nums[i] + i;
            if (val >= target) {
                target = i;
            }
            if(target == 0){
                return true;
            }
        }
        return false;
    }

}



// Time Complexity :O(n)
// Space Complexity :
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no

// Your code here along with comments explaining your approach:Greedy forward

class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
      
        if (n < 2) {
            return true;
        }
          int currItr = nums[0];
        int nextItr = nums[0];
        for (int i = 1; i <n ; i++) {
            if(currItr >= n-1){
                return true;
            }
           nextItr =Math.max(nextItr,i+nums[i]);
           if(i == currItr){
            currItr=nextItr;
           }
        }
      return false; 
    }

}